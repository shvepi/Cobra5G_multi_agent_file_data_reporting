// const { Middleware }  from('swagger-express-middleware');

import fs from "fs";
import path from "path";
import swaggerUI from "swagger-ui-express";
import jsYaml from "js-yaml";
import express from "express";
import cors from "cors";
import cookieParser from "cookie-parser";
import bodyParser from "body-parser";
import morgan from "morgan";
import * as OpenApiValidator from "express-openapi-validator";
import logger from "./common/logger";
import config from "../config";

const Logger = logger(__filename);

class ExpressServer {
	port: number;
	app: any;
	openApiPath: any;
	schema: any;
	server: any;
	endpointPrefix: any;

	constructor(port = 8080, openApiYaml) {
		this.port = port;
		this.app = express();
		this.openApiPath = openApiYaml;
		try {
			this.schema = jsYaml.load(fs.readFileSync(openApiYaml));
			const serverTemplate = this.schema.servers[0].url;
			const serverVariables = this.schema.servers[0].variables;
			const resolvedServer = serverTemplate.replace(
				/{MnSVersion}/g,
				(match) => {
					if (
						serverVariables.MnSVersion &&
						serverVariables.MnSVersion.default
					) {
						return serverVariables.MnSVersion.default;
					}
					return match; // If the variable doesn't exist or doesn't have a default value, keep it as is
				},
			);

			// Remove any remaining variables and leading/trailing slashes
			this.endpointPrefix = resolvedServer
				.replace(/{\w+}/g, "")
				.replace(/^\/|\/$/g, "");
		} catch (e) {
			// @ts-ignore
			Logger.error("failed to start Express Server", e.message);
		}
		this.setupMiddleware();
	}

	setupMiddleware() {
		// this.setupAllowedMedia();
		this.app.use(cors());
		this.app.use(bodyParser.json({ limit: "50MB" }));
		this.app.use(express.json());
		this.app.use(express.urlencoded({ extended: false }));
		this.app.use(cookieParser());
		//Simple test to see that the server is up and responding
		this.app.get("/hello", (req, res) =>
			res.send(`Hello World. path: ${this.openApiPath}`),
		);
		//Send the openapi document *AS GENERATED BY THE GENERATOR*
		this.app.get("/openapi", (req, res) =>
			res.sendFile(path.join(__dirname, "api", "openapi.yaml")),
		);
		//View the openapi document in a visual interface. Should be able to test from this page
		this.app.use(
			"/api-docs",
			swaggerUI.serve,
			swaggerUI.setup(this.schema),
		);
		this.app.get("/login-redirect", (req, res) => {
			res.status(200);
			res.json(req.query);
		});
		this.app.get("/oauth2-redirect.html", (req, res) => {
			res.status(200);
			res.json(req.query);
		});
		this.app.use(
			OpenApiValidator.middleware({
				apiSpec: this.openApiPath,
				fileUploader: { dest: config.FILE_UPLOAD_PATH },
			}),
		);
		// eslint-disable-next-line @typescript-eslint/no-unused-vars
		this.app.use((err, req, res, next) => {
			// format errors
			res.status(err.status || 500).json({
				message: err.message || err,
				errors: err.errors || "",
			});
		});

		const morganMiddleware = morgan(
			":method :url :status - :response-time ms",
			{
				stream: {
					// Configure Morgan to use our custom logger with the http severity
					write: (message) => Logger.http(message.trim()),
				},
			},
		);
		this.app.use(morganMiddleware);
	}

	addRoute(router: express.Router) {
		this.app.use("/" + this.endpointPrefix, router);
	}

	launch() {
		this.server = this.app.listen(this.port);
		Logger.info(`Server listening on port ${this.port}`);
	}

	async close() {
		if (this.server !== undefined) {
			await this.server.close();
			Logger.info(`Server on port ${this.port} shut down`);
		}
	}
}

export default ExpressServer;
