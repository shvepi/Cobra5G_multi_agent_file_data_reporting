"use strict";
// const { Middleware }  from('swagger-express-middleware');
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const cookie_parser_1 = __importDefault(require("cookie-parser"));
const body_parser_1 = __importDefault(require("body-parser"));
const morgan_1 = __importDefault(require("morgan"));
const OpenApiValidator = __importStar(require("express-openapi-validator"));
const logger_1 = __importDefault(require("./common/logger"));
const config_1 = __importDefault(require("../config"));
const Logger = (0, logger_1.default)(__filename);
class ExpressServer {
    constructor(port = 8080, openApiYaml) {
        this.port = port;
        this.app = (0, express_1.default)();
        this.openApiPath = openApiYaml;
        try {
            this.schema = js_yaml_1.default.load(fs_1.default.readFileSync(openApiYaml));
            const serverTemplate = this.schema.servers[0].url;
            const serverVariables = this.schema.servers[0].variables;
            const resolvedServer = serverTemplate.replace(/{MnSVersion}/g, (match) => {
                if (serverVariables.MnSVersion &&
                    serverVariables.MnSVersion.default) {
                    return serverVariables.MnSVersion.default;
                }
                return match; // If the variable doesn't exist or doesn't have a default value, keep it as is
            });
            // Remove any remaining variables and leading/trailing slashes
            this.endpointPrefix = resolvedServer
                .replace(/{\w+}/g, "")
                .replace(/^\/|\/$/g, "");
        }
        catch (e) {
            // @ts-ignore
            Logger.error("failed to start Express Server", e.message);
        }
        this.setupMiddleware();
    }
    setupMiddleware() {
        // this.setupAllowedMedia();
        this.app.use((0, cors_1.default)());
        this.app.use(body_parser_1.default.json({ limit: "50MB" }));
        this.app.use(express_1.default.json());
        this.app.use(express_1.default.urlencoded({ extended: false }));
        this.app.use((0, cookie_parser_1.default)());
        //Simple test to see that the server is up and responding
        this.app.get("/hello", (req, res) => res.send(`Hello World. path: ${this.openApiPath}`));
        //Send the openapi document *AS GENERATED BY THE GENERATOR*
        this.app.get("/openapi", (req, res) => res.sendFile(path_1.default.join(__dirname, "api", "openapi.yaml")));
        //View the openapi document in a visual interface. Should be able to test from this page
        this.app.use("/api-docs", swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(this.schema));
        this.app.get("/login-redirect", (req, res) => {
            res.status(200);
            res.json(req.query);
        });
        this.app.get("/oauth2-redirect.html", (req, res) => {
            res.status(200);
            res.json(req.query);
        });
        this.app.use(OpenApiValidator.middleware({
            apiSpec: this.openApiPath,
            fileUploader: { dest: config_1.default.FILE_UPLOAD_PATH },
        }));
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.app.use((err, req, res, next) => {
            // format errors
            res.status(err.status || 500).json({
                message: err.message || err,
                errors: err.errors || "",
            });
        });
        const morganMiddleware = (0, morgan_1.default)(":method :url :status - :response-time ms", {
            stream: {
                // Configure Morgan to use our custom logger with the http severity
                write: (message) => Logger.http(message.trim()),
            },
        });
        this.app.use(morganMiddleware);
    }
    addRoute(router) {
        this.app.use("/" + this.endpointPrefix, router);
    }
    launch() {
        this.server = this.app.listen(this.port);
        Logger.info(`Server listening on port ${this.port}`);
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.server !== undefined) {
                yield this.server.close();
                Logger.info(`Server on port ${this.port} shut down`);
            }
        });
    }
}
exports.default = ExpressServer;
